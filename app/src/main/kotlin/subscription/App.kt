/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package subscription

import com.apollographql.apollo3.ApolloClient
import com.apollographql.apollo3.api.http.HttpHeader
import com.apollographql.apollo3.network.http.HeadersInterceptor
import com.apollographql.apollo3.network.ws.GraphQLWsProtocol
import com.apollographql.apollo3.network.ws.WebSocketNetworkTransport
import kotlinx.coroutines.runBlocking

fun main() = runBlocking {
    // Change useGraphQLWsProtocol to true to see the issue appear
    val apolloClient = createApolloClient(useGraphQLWsProtocol = false)

    SampleSubscriptions(apolloClient).execute()
//    SampleQueries(apolloClient).execute()
}

fun createApolloClient(useGraphQLWsProtocol: Boolean): ApolloClient {
    val serverTcpUrl = "http://127.0.0.1:7070/v1/graphql"
    val serverWsUrl = "ws://127.0.0.1:7070/v1/graphql"
    val adminSecret = "gimcrack-chief-ohmmeter-wurst"


    val webSocketNetworkTransportBuilder = WebSocketNetworkTransport.Builder()
        .serverUrl(serverWsUrl)
        .addHeader("x-hasura-admin-secret", adminSecret)

    if (useGraphQLWsProtocol) {
        webSocketNetworkTransportBuilder.protocol(GraphQLWsProtocol.Factory()) // https://www.apollographql.com/docs/kotlin/essentials/subscriptions#customizing-your-websocket-protocol
    }

    return ApolloClient.Builder()
        .serverUrl(serverTcpUrl)
        .subscriptionNetworkTransport(webSocketNetworkTransportBuilder.build())// why this? https://github.com/apollographql/apollo-kotlin/issues/4266#issuecomment-1183439647
        .addHttpInterceptor(HeadersInterceptor(listOf(HttpHeader("x-hasura-admin-secret", adminSecret))))
        .build()
}